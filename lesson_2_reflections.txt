How is the staging area different from the working directory and the repository? What value do you think it offers?

	As you change your files the staging area is where these changes are ready to be commited to the repository.

How can you use the staging area to make sure you have one commit per logical change?

	You can add and remove files from the staging area so that only the changes to a specific file are submitted with that commit. And other unrelated changes that you were working on in another file don't get submitted along with that commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	
	Branches would be helpful where you wanted to implement a new feature that you had to work on while supporting the original project with bug fixes or small changes until that feature was ready. 

How do the diagrams help you visualize the branch structure?

	The biggest help to me is to see where the parent is in the tree.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	Merging two branches together effectively turns them into one branch. While the commits are retained from both branches up to their parents their changes are unified now. It's represented in the diagram that way so we know that there was a merger of branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	
	You will only have to check lines of code that are different in comparison to going through the code line by line.