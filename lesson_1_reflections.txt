How did viewing a diff between two versions of a file help you see the bug that was introduced?
	
	It gives you a quick view of what has changed between the two file versions without having to read each line.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
	
	You can always go back to a known working version of the file if a mistake was made or quickly remove an unwanted or malfunctioning feature if that feature did not exist in an earlier version. 

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

	You can chose when it makes sense for the specific task at hand to be saved, only commiting when logical changes have been made.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

	Since you might have to change a reference in multiple files related to one project, it is helpful to have these changes tracked across files. 

How can you use the commands git log and git diff to view the history of files?
	
	Git log will show you the list of commits that have been made for that project.  Git diff will show you the differences between a set of commits to see what has changed between them.

How might using version control make you more confident to make changes that could break something?

	So long as I have made recent commits with working versions then I know I can always revert back to the working one or see the changes that may have caused something to break. 

Now that you have your workspace set up, what do you want to try using Git for?

	Keeping track of my coding projects.

